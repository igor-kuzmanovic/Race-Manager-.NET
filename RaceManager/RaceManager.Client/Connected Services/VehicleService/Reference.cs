//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RaceManager.Client.VehicleService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VehicleDTO", Namespace="http://schemas.datacontract.org/2004/07/RaceManager.Server.Service.Core.DataTrans" +
        "ferObjects")]
    [System.SerializableAttribute()]
    public partial class VehicleDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double EngineDisplacementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double EngineHorsepowerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ManufacturerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double EngineDisplacement {
            get {
                return this.EngineDisplacementField;
            }
            set {
                if ((this.EngineDisplacementField.Equals(value) != true)) {
                    this.EngineDisplacementField = value;
                    this.RaisePropertyChanged("EngineDisplacement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double EngineHorsepower {
            get {
                return this.EngineHorsepowerField;
            }
            set {
                if ((this.EngineHorsepowerField.Equals(value) != true)) {
                    this.EngineHorsepowerField = value;
                    this.RaisePropertyChanged("EngineHorsepower");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Manufacturer {
            get {
                return this.ManufacturerField;
            }
            set {
                if ((object.ReferenceEquals(this.ManufacturerField, value) != true)) {
                    this.ManufacturerField = value;
                    this.RaisePropertyChanged("Manufacturer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="VehicleService.IVehicleService")]
    public interface IVehicleService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicleService/Get", ReplyAction="http://tempuri.org/IVehicleService/GetResponse")]
        RaceManager.Client.VehicleService.VehicleDTO Get(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicleService/Get", ReplyAction="http://tempuri.org/IVehicleService/GetResponse")]
        System.Threading.Tasks.Task<RaceManager.Client.VehicleService.VehicleDTO> GetAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicleService/GetAll", ReplyAction="http://tempuri.org/IVehicleService/GetAllResponse")]
        RaceManager.Client.VehicleService.VehicleDTO[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicleService/GetAll", ReplyAction="http://tempuri.org/IVehicleService/GetAllResponse")]
        System.Threading.Tasks.Task<RaceManager.Client.VehicleService.VehicleDTO[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicleService/Add", ReplyAction="http://tempuri.org/IVehicleService/AddResponse")]
        void Add(RaceManager.Client.VehicleService.VehicleDTO dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicleService/Add", ReplyAction="http://tempuri.org/IVehicleService/AddResponse")]
        System.Threading.Tasks.Task AddAsync(RaceManager.Client.VehicleService.VehicleDTO dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicleService/Update", ReplyAction="http://tempuri.org/IVehicleService/UpdateResponse")]
        void Update(RaceManager.Client.VehicleService.VehicleDTO dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicleService/Update", ReplyAction="http://tempuri.org/IVehicleService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(RaceManager.Client.VehicleService.VehicleDTO dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicleService/Remove", ReplyAction="http://tempuri.org/IVehicleService/RemoveResponse")]
        void Remove(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicleService/Remove", ReplyAction="http://tempuri.org/IVehicleService/RemoveResponse")]
        System.Threading.Tasks.Task RemoveAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IVehicleServiceChannel : RaceManager.Client.VehicleService.IVehicleService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VehicleServiceClient : System.ServiceModel.ClientBase<RaceManager.Client.VehicleService.IVehicleService>, RaceManager.Client.VehicleService.IVehicleService {
        
        public VehicleServiceClient() {
        }
        
        public VehicleServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public VehicleServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VehicleServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VehicleServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public RaceManager.Client.VehicleService.VehicleDTO Get(int id) {
            return base.Channel.Get(id);
        }
        
        public System.Threading.Tasks.Task<RaceManager.Client.VehicleService.VehicleDTO> GetAsync(int id) {
            return base.Channel.GetAsync(id);
        }
        
        public RaceManager.Client.VehicleService.VehicleDTO[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<RaceManager.Client.VehicleService.VehicleDTO[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public void Add(RaceManager.Client.VehicleService.VehicleDTO dto) {
            base.Channel.Add(dto);
        }
        
        public System.Threading.Tasks.Task AddAsync(RaceManager.Client.VehicleService.VehicleDTO dto) {
            return base.Channel.AddAsync(dto);
        }
        
        public void Update(RaceManager.Client.VehicleService.VehicleDTO dto) {
            base.Channel.Update(dto);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(RaceManager.Client.VehicleService.VehicleDTO dto) {
            return base.Channel.UpdateAsync(dto);
        }
        
        public void Remove(int id) {
            base.Channel.Remove(id);
        }
        
        public System.Threading.Tasks.Task RemoveAsync(int id) {
            return base.Channel.RemoveAsync(id);
        }
    }
}
