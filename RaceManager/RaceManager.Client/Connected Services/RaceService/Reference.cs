//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RaceManager.Client.RaceService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RaceDTO", Namespace="http://schemas.datacontract.org/2004/07/RaceManager.Server.Service.Core.DataTrans" +
        "ferObjects")]
    [System.SerializableAttribute()]
    public partial class RaceDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EventDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventLocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EventDate {
            get {
                return this.EventDateField;
            }
            set {
                if ((this.EventDateField.Equals(value) != true)) {
                    this.EventDateField = value;
                    this.RaisePropertyChanged("EventDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventLocation {
            get {
                return this.EventLocationField;
            }
            set {
                if ((object.ReferenceEquals(this.EventLocationField, value) != true)) {
                    this.EventLocationField = value;
                    this.RaisePropertyChanged("EventLocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RaceService.IRaceService")]
    public interface IRaceService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRaceService/Get", ReplyAction="http://tempuri.org/IRaceService/GetResponse")]
        RaceManager.Client.RaceService.RaceDTO Get(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRaceService/Get", ReplyAction="http://tempuri.org/IRaceService/GetResponse")]
        System.Threading.Tasks.Task<RaceManager.Client.RaceService.RaceDTO> GetAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRaceService/GetAll", ReplyAction="http://tempuri.org/IRaceService/GetAllResponse")]
        RaceManager.Client.RaceService.RaceDTO[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRaceService/GetAll", ReplyAction="http://tempuri.org/IRaceService/GetAllResponse")]
        System.Threading.Tasks.Task<RaceManager.Client.RaceService.RaceDTO[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRaceService/Add", ReplyAction="http://tempuri.org/IRaceService/AddResponse")]
        void Add(RaceManager.Client.RaceService.RaceDTO dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRaceService/Add", ReplyAction="http://tempuri.org/IRaceService/AddResponse")]
        System.Threading.Tasks.Task AddAsync(RaceManager.Client.RaceService.RaceDTO dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRaceService/Update", ReplyAction="http://tempuri.org/IRaceService/UpdateResponse")]
        void Update(RaceManager.Client.RaceService.RaceDTO dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRaceService/Update", ReplyAction="http://tempuri.org/IRaceService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(RaceManager.Client.RaceService.RaceDTO dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRaceService/Remove", ReplyAction="http://tempuri.org/IRaceService/RemoveResponse")]
        void Remove(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRaceService/Remove", ReplyAction="http://tempuri.org/IRaceService/RemoveResponse")]
        System.Threading.Tasks.Task RemoveAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRaceServiceChannel : RaceManager.Client.RaceService.IRaceService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RaceServiceClient : System.ServiceModel.ClientBase<RaceManager.Client.RaceService.IRaceService>, RaceManager.Client.RaceService.IRaceService {
        
        public RaceServiceClient() {
        }
        
        public RaceServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RaceServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RaceServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RaceServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public RaceManager.Client.RaceService.RaceDTO Get(int id) {
            return base.Channel.Get(id);
        }
        
        public System.Threading.Tasks.Task<RaceManager.Client.RaceService.RaceDTO> GetAsync(int id) {
            return base.Channel.GetAsync(id);
        }
        
        public RaceManager.Client.RaceService.RaceDTO[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<RaceManager.Client.RaceService.RaceDTO[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public void Add(RaceManager.Client.RaceService.RaceDTO dto) {
            base.Channel.Add(dto);
        }
        
        public System.Threading.Tasks.Task AddAsync(RaceManager.Client.RaceService.RaceDTO dto) {
            return base.Channel.AddAsync(dto);
        }
        
        public void Update(RaceManager.Client.RaceService.RaceDTO dto) {
            base.Channel.Update(dto);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(RaceManager.Client.RaceService.RaceDTO dto) {
            return base.Channel.UpdateAsync(dto);
        }
        
        public void Remove(int id) {
            base.Channel.Remove(id);
        }
        
        public System.Threading.Tasks.Task RemoveAsync(int id) {
            return base.Channel.RemoveAsync(id);
        }
    }
}
